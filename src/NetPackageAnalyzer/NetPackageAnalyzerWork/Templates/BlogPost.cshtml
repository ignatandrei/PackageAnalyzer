@inherits RazorBlade.PlainTextTemplate<Tuple<InfoSolution,ProjectsDict, DisplayDataMoreThan1Version, ClassesRefData,PublicClassRefData>>;
@{
    var prefix = GlobalsForGenerating.globalPrefix();
    var nameSolution = GlobalsForGenerating.NameSolution;    
    var info = Model.Item1;
    var projectDicts = Model.Item2;

    var nrProjectsNoTests = info.nrProjects - info.nrTestProjects;
    var more1Version = Model.Item3;
    var refSummary = Model.Item4;
    var publicClassRefData = Model.Item5;
    var mostPublicClasses = publicClassRefData
    .Assemblies_PublicClasses
    .FirstOrDefault();
    var maxAssemblyRef = refSummary.AssembliesReferences.FirstOrDefault();

    var keysPackageMultiple = more1Version.KeysPackageMultipleMajorDiffers();
    var nrVersionIterator = 0;
    var yearCommitsFolder = projectDicts.CommitsPerYearFolder();
    var yearCommitsFile = projectDicts.CommitsPerYearFile();
    var maxCommitYear = yearCommitsFolder.Max(x => x.Key);
    var minCommitYear = yearCommitsFolder.Min(x => x.Key);
    var currentYear= DateTime.Now.Year;
    var maxCommitString = "";
    if(maxCommitYear != currentYear)
    {
        maxCommitString = $"<Highlight color='red'>{maxCommitYear}</Highlight>";
    }
    else
    {
        maxCommitString = "this year," + currentYear;
    }
    var maxCommitFiles = projectDicts.CommitsWithMaxFiles(null);
    var top10Files = projectDicts.FilesWithMaxCommits(null);
    var medianCommits = projectDicts.MedianCommits(null);
    var filewithMaxCommits = top10Files.First();

    Tuple<NamePerCount[], string> tuple;
    NamePerCountDisplay namePerCountDisplay;
}
---
sidebar_position: 5000
slug: summary
---


# Summary @(nameSolution)

export const Highlight = ({children, color}) => (
<span style={{
      backgroundColor: color,
      borderRadius: '2px' ,
      color: '#fff' ,
      padding: '0.2rem' ,
      }}>
    {children}
</span>
);


:::summary

[Number projects](pathname:///docs/Analysis/@(nameSolution)/ProjectRelation) : @info.nrProjects
([tests](pathname:///docs/Analysis/@(nameSolution)/TestProjects) : @info.nrTestProjects,
[no tests](pathname:///docs/Analysis/@(nameSolution)/ProjectRelation) : @nrProjectsNoTests
)


[Number packages](pathname:///docs/Analysis/@(nameSolution)/DisplayAllVersions) : @info.nrPackages 
([Outdated](pathname:///docs/Analysis/@(nameSolution)/DisplayOutdatedDeprecated): @info.nrOutdated,
[Deprecated](pathname:///docs/Analysis/@(nameSolution)/DisplayOutdatedDeprecated): @info.nrDeprecated,
[Major version differs](pathname:///docs/Analysis/@(nameSolution)/DisplayAllVersions) <Highlight color='red'>@info.nrMajorDiffers</Highlight>
)
@if (maxAssemblyRef != null)
{
<text>
[Assembly with most references](pathname:///docs/Analysis/@(nameSolution)/summaryProjectReferences)
: @maxAssemblyRef.Name @maxAssemblyRef.Count
</text>    
}
@if (mostPublicClasses != null)
{
    <text>
        [Most public classes](pathname:///docs/Analysis/@(nameSolution)/summaryPublicClasses)
:@mostPublicClasses.Name @mostPublicClasses.Count
</text>
}


[Total Commits](pathname:///docs/Analysis/@(nameSolution)/Commits): @info.totalCommits
( last commit : @maxCommitString )

The commit with max files ( @maxCommitFiles.CountFiles()  ) is sha @(maxCommitFiles.sha) on @maxCommitFiles.date.ToString("yyyy MMMM dd") )

The file with most commits ( @filewithMaxCommits.Value ) is @filewithMaxCommits.Key

:::

## @nrProjectsNoTests Projects

```mermaid
flowchart LR 


@foreach (var proj in projectDicts.AlphabeticOrderedProjectsNoTests)
{
    var nameCsproj = proj.NameCSproj();
    var relativePath = proj.RelativePath();
    var comment = $"%% start project reference {relativePath}";
    <text>

@comment
        @if (proj.AlphabeticalProjectsReferences().Length == 0)
        {
            <text>
                @nameCsproj
            </text>
        }

@foreach (var rel in proj.AlphabeticalProjectsReferences())
{
<text>
@nameCsproj-->@rel.NameCSproj()

</text>

}
</text>
}
```

## @keysPackageMultiple.Length Packages with major version different
<table>
    <thead>
        <tr>
            <th>Nr</th>
            <th>ID</th>
            <th>References</th>
            <th>Projects</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var key in keysPackageMultiple)
        {
            nrVersionIterator++;            
            var pack = more1Version.IDPackageWithProjects[key]!;
            var vals = pack.VersionsPerProject;
            var majorDiff = pack.MajorVersionDiffer();
            string textReferences = vals.Count > 1 ? $" *(References: {vals.Count})* " : "";
            string diffMajor = majorDiff ? $"<Highlight color='red'> **Major differs** </Highlight>" : "";
            string refs = "";
            @foreach (var vers in vals)
            {

                refs += " <b>" + vers.Key + "</b> " + string.Join(",", vers.Value.Select(it => it.NameCSproj()).ToArray());
                @* @(vers.Key) @("&nbsp;") @(string.Join(",",vers.Value.Select(it=>it.NameCSproj()))) *@
                refs += "<br/>";
            }


            <tr>
                <td>@nrVersionIterator</td>
                <td>@key</td>
                <td>@textReferences @diffMajor</td>
                <td>@refs</td>
            </tr>
        }
    </tbody>
</table>

## Summary of project public classes
@if (mostPublicClasses != null)
{
    
<text>
### Assemblies with number of public classes

        @{
            tuple = new(publicClassRefData.Assemblies_PublicClasses, "Public class per project");
            namePerCountDisplay = new(tuple);
        }

        @namePerCountDisplay.Render()

### Assemblies with Public methods


        @{
            tuple = new(publicClassRefData.Assemblies_PublicMethods, "Public methods per class");
            namePerCountDisplay = new(tuple);
        }

        @namePerCountDisplay.Render()

### Classes with Public methods


        @{
            tuple = new(publicClassRefData.Class_PublicMethods, "Public methods per class");
            namePerCountDisplay = new(tuple);
        }

        @namePerCountDisplay.Render()
## Lines summary

### Assemblies with most lines in public classses
@{
    tuple = new(publicClassRefData.Assemblies_MostLinesInPublicClass, "Number lines in public class per assembly");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

### Public Classes with most lines
@{
    tuple = new(publicClassRefData.PublicClass_MostLinesOfCode, "Number lines per public class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()


### Public Methods with most lines
@{
            tuple = new(publicClassRefData.PublicMethod_MostLinesOfCode, "Number lines per public method");
    namePerCountDisplay = new(tuple);
}

</text>
}


## References between projects

### Assemblies with References
@{
    tuple = new(refSummary.AssembliesReferences, "References per assembly");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

### Classes with References

@{
    tuple = new(refSummary.classRefs, "References per class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()



## Commits 

### Commits per year 
@{
    var xaxis = "[" +
    string.Join(',', yearCommitsFolder
        .Select(it => it.Key)
        .OrderBy(x => x)
        .ToArray()) + "]";
    var maxCommit = yearCommitsFolder.Max(x => x.Value);
    var commitsFolder = "[" + string.Join(',', yearCommitsFolder
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
    var CommitsFile = "[" + string.Join(',', yearCommitsFile
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
}

```mermaid
xychart-beta
title "Commits per year (folder and csproj)"
x-axis @xaxis
y-axis "" 0--> @maxCommit
bar @commitsFolder
bar @CommitsFile
```

### Most Commits per file

@{
    var renderFiles = new DisplayCommitsFiles(Tuple.Create(top10Files, medianCommits));

}

@renderFiles.Render()


@{
    CommitsWithMaxFilesPerYear c=new CommitsWithMaxFilesPerYear(projectDicts);

}

### Commits with most files per year

@c.Render()



<small>Generated  by https://www.nuget.org/packages/NetPackageAnalyzerConsole </small>