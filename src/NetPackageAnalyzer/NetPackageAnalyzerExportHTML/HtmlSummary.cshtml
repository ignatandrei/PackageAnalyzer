@inherits RazorBlade.PlainTextTemplate<Tuple<InfoSolution,ProjectsDict, DisplayDataMoreThan1Version, ClassesRefData,PublicClassRefData,AssemblyDataFromMSFT>>;
@{
    var prefix = GlobalsForGenerating.globalPrefix();
    var nameSolution = GlobalsForGenerating.NameSolution;
    var info = Model.Item1;
    var projectDicts = Model.Item2;

    var nrProjectsNoTests = info.nrProjects - info.nrTestProjects;
    var more1Version = Model.Item3;
    var refSummary = Model.Item4;
    var publicClassRefData = Model.Item5;
    var assemblyDataFromMSFT = Model.Item6;
    var mostPublicClasses = publicClassRefData
    .Assemblies_PublicClasses
    .FirstOrDefault();
    var maxAssemblyRef = refSummary.AssembliesReferences.FirstOrDefault();

    var keysPackageMultiple = more1Version.KeysPackageMultipleMajorDiffers();
    var nrVersionIterator = 0;
    var yearCommitsFolder = projectDicts.CommitsPerYearFolder();
    var yearCommitsFile = projectDicts.CommitsPerYearFile();
    int? maxCommitYear = yearCommitsFolder.Count==0?null: yearCommitsFolder.Max(x => x.Key);
    int? minCommitYear = yearCommitsFolder.Count == 0 ? null : yearCommitsFolder.Min(x => x.Key);
    var currentYear = DateTime.Now.Year;
    var yearWithFolders = projectDicts.CommitsYearFolders();
    var maxCommitString = "";
    if (maxCommitYear != currentYear)
    {
        maxCommitString = $"<Highlight color='red'>{maxCommitYear}</Highlight>";
    }
    else
    {
        maxCommitString = "this year," + currentYear;
    }
    var maxCommitFiles = projectDicts.CommitsWithMaxFiles(null);
    var top10Files = projectDicts.FilesWithMaxCommits(null);
    var medianCommits = projectDicts.MedianCommits(null);
    KeyValuePair<string,int>? filewithMaxCommits = top10Files?.Length>0? top10Files.First():null;
    Tuple<NamePerCount[], string> tuple;
    NamePerCountDisplay namePerCountDisplay;
    YEARNamePerCountDisplay yearFolders= new(yearWithFolders);
    Radar radar = new(Tuple.Create(projectDicts, publicClassRefData, assemblyDataFromMSFT,"andrei"));
    var bb0= projectDicts.BuildingBlocks(0);

    var execAssLines = assemblyDataFromMSFT
        .AssemblyMetric(eMSFTMetrics.ExecutableLines)
        .OrderByDescending(it=>it.Count)
        .ToArray()
        ;
    var maxexecAssLines = assemblyDataFromMSFT.AssemblyMetricMax(eMSFTMetrics.ExecutableLines);
    var execClassLines = assemblyDataFromMSFT
        .ClassesMetrics(eMSFTMetrics.ExecutableLines)
        .OrderByDescending(x => x.Count)
        .ToArray();
    ;
    var maxExecClassLines = assemblyDataFromMSFT
        .ClassesMetricMax(eMSFTMetrics.ExecutableLines)

        ; 

    var execMethodsLines = assemblyDataFromMSFT
        .MethodsMetrics(eMSFTMetrics.ExecutableLines)
        .OrderByDescending(x => x.Count)
        .ToArray();

    var nrClassesPerAssembly = assemblyDataFromMSFT
        .AssemblyNumberClasses()
        .OrderByDescending(it => it.Count)
        .ToArray();
    var maxClasses = nrClassesPerAssembly.First();

}

<html lang="en">
<head>
    <meta charset="utf-8">
    <script type="text/javascript" src="echarts.min.js"></script>
</head>
<body>
    <h1>Summary @nameSolution   </h1>
    
    Number projects : @info.nrProjects
    (tests : @info.nrTestProjects,
    no tests: @nrProjectsNoTests
    )
    <br />
    Building Blocks: @bb0.Length
    <br />
    Number packages : @info.nrPackages
    <br />
    Outdated : @info.nrOutdated,
    <br />Deprecated : @info.nrDeprecated,
    <br />Major version differs :@info.nrMajorDiffers

    @if (maxAssemblyRef != null)
    {
        <text>
            <br />
            Assembly with most references: @maxAssemblyRef.Name @maxAssemblyRef.Count
        </text>
    }
    @if (mostPublicClasses != null)
    {
        <text>
            <br />
            Most public classes :@mostPublicClasses.Name @mostPublicClasses.Count
        </text>
    }
    <br />
    Most classes :@maxClasses.Name @maxClasses.Count

    <br />
    Total Commits : @info.totalCommits    ( last commit : @maxCommitString )
    <br />
    The commit with max files ( @maxCommitFiles.CountFiles()  ) is sha @(maxCommitFiles.sha) on @maxCommitFiles.date.ToString("yyyy MMMM dd") )
    <br />
    The file with most commits ( @filewithMaxCommits?.Value ) is @GlobalsForGenerating.RelativePath( filewithMaxCommits?.Key)

    <br />
    Project with most lines: @maxexecAssLines.Name @maxexecAssLines.Count
    <br />
    Class with most Lines: @maxExecClassLines.Name @maxExecClassLines.Count
    <br />

    <h1>Radar @nameSolution</h1>

    @radar.Render()
    <br />

    <h2> @nrProjectsNoTests Projects without tests</h2>
    <div class="mermaid">
        flowchart LR


    @foreach (var proj in projectDicts.AlphabeticOrderedProjectsNoTests)
    {
        var nameCsproj = proj.NameCSproj();
        var relativePath = proj.RelativePath();
        var comment = $"%% start project reference {relativePath}";
        <text>

            @comment
            @if (proj.AlphabeticalProjectsReferences().Length == 0)
            {
                <text>
                    @nameCsproj
                </text>
            }

            @foreach (var rel in proj.AlphabeticalProjectsReferences())
            {
                <text>
                    @nameCsproj-->@rel.NameCSproj()

                </text>

            }
        </text>
    }
</div>

    <h2> @info.nrProjects Projects with tests</h2>
    <div class="mermaid">
        flowchart LR


        @foreach (var proj in projectDicts.AlphabeticOrderedProjects)
        {
            var nameCsproj = proj.NameCSproj();
            var relativePath = proj.RelativePath();
            var comment = $"%% start project reference {relativePath}";
            <text>

                @comment
                @if (proj.AlphabeticalProjectsReferences().Length == 0)
                {
                    <text>
                        @nameCsproj
                    </text>
                }

                @foreach (var rel in proj.AlphabeticalProjectsReferences())
                {
                    <text>
                        @nameCsproj-->@rel.NameCSproj()

                    </text>

                }
            </text>
        }
    </div>


<h2>Building Blocks : @bb0.Length </h2>
    @foreach (var bbProj in bb0)
    {
        var nameCsproj = bbProj.NameCSproj();
        var relativePath = bbProj.RelativePath();
        <text>
            <h3>Project: @nameCsproj</h3>
            Full Name : @relativePath

            <div class="mermaid">
                flowchart LR
            @nameCsproj
            @foreach (var rel in bbProj.AlphabeticalUpStreamProjectReferences)
            {
                <text>
                    @rel.FullNameMermaid()
                    @rel.NameCSproj()-->@nameCsproj
                </text>
            }

            </div>

        </text>
    }

    <h2> Number of classes per assembly</h2>

    @{
        tuple = new(nrClassesPerAssembly, "Number class per project");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()


    <h2>@keysPackageMultiple.Length Packages with major version different</h2>
    @if(keysPackageMultiple.Length>0){
    <table border="1">
        <thead>
            <tr>
                <th>Nr</th>
                <th>ID</th>
                <th>References</th>
                <th>Projects</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var key in keysPackageMultiple)
            {
                nrVersionIterator++;
                var pack = more1Version.IDPackageWithProjects[key]!;
                var vals = pack.VersionsPerProject;
                var majorDiff = pack.MajorVersionDiffer();
                string textReferences = vals.Count > 1 ? $" (References: {vals.Count}) " : "";
                string diffMajor = majorDiff ? $"<span style='color:red'> <b>Major differs</b> </span>" : "";
                string refs = "";
                @foreach (var vers in vals)
                {

                    refs += " <b>" + vers.Key + "</b> " + string.Join(",", vers.Value.Select(it => it.NameCSproj()).ToArray());
                    @* @(vers.Key) @("&nbsp;") @(string.Join(",",vers.Value.Select(it=>it.NameCSproj()))) *@
                    refs += "<br/>";
                }


                <tr>
                    <td>@nrVersionIterator</td>
                    <td>@key</td>
                    <td>@textReferences @diffMajor</td>
                    <td>@refs</td>
                </tr>
            }
        </tbody>
    </table>
    }
    <h2>Executable lines</h2>
    <h3>Per assembly</h3>
    @{
        tuple = new(execAssLines, "Number lines per project");
        namePerCountDisplay = new(tuple);
    }
    @namePerCountDisplay.Render()

    <h3>Per class</h3>

    @{

        tuple = new(execClassLines, "Number lines per class");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()

    <h2>Summary of project public classes</h2>
    @if (mostPublicClasses != null)
    {
<text>


<h3> Assemblies with number of public classes</h3>

@{
    tuple = new(publicClassRefData.Assemblies_PublicClasses, "Public class per project");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h3> Assemblies with Public methods</h3>

@{
    tuple = new(publicClassRefData.Assemblies_PublicMethods, "Public methods per class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()


<h3> Classes with Public methods</h3>


@{
    tuple = new(publicClassRefData.Class_PublicMethods, "Public methods per class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h2> Lines summary</h2>

<h3>Assemblies with most lines in public classses</h3>
@{
    tuple = new(publicClassRefData.Assemblies_MostLinesInPublicClass, "Number lines in public class per assembly");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h3>Public Classes with most lines</h3>
@{
    tuple = new(publicClassRefData.PublicClass_MostLinesOfCode, "Number lines per public class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h3>Public Methods with most lines</h3>

@{
    tuple = new(publicClassRefData.PublicMethod_MostLinesOfCode, "Number lines per public method");
    namePerCountDisplay = new(tuple);
}


@namePerCountDisplay.Render()


</text>

    }
    <h2> References between projects</h2>

    <h3> Assemblies with Referencesx</h3>
    @{
        tuple = new(refSummary.AssembliesReferences, "References per assembly");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()
    <h3> Classes with References</h3>

    @{
        tuple = new(refSummary.classRefs, "References per class");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()

    <h2> Commits</h2>
    <h3> Commits per year</h3>
    @if(yearCommitsFolder.Count>0){

        var xaxis = "[" +
        string.Join(',', yearCommitsFolder
        .Select(it => it.Key)
        .OrderBy(x => x)
        .ToArray()) + "]";
        var maxCommit = yearCommitsFolder.Max(x => x.Value);
        var commitsFolder = "[" + string.Join(',', yearCommitsFolder
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
        var CommitsFile = "[" + string.Join(',', yearCommitsFile
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
<text>
<div class="mermaid">
    xychart-beta
    title "Commits per year (folder and csproj)"
    x-axis @xaxis
    y-axis "" 0--> @maxCommit
    bar @commitsFolder
    bar @CommitsFile
</div>

</text>

<h3> Commits per year and folder </h3>

@yearFolders.Render() 


    }


@{
    var maxCommitFilesPerYear = projectDicts.CommitsWithMaxFilesPerYear();
}
    <h3> Commits with most files per year</h3>
    <table border="1">
        <thead>
            <tr>
                <th>Nr</th>
                <th>SHA</th>
                <th>Date</th>
                <th>NrFiles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in maxCommitFilesPerYear)
            {
                nrVersionIterator++;
                var key = kvp.Value;

                <tr>
                    <td>@nrVersionIterator</td>
                    <td>@key.sha</td>
                    <td>@key.date.ToString("yyyy MMM dd")</td>
                    <td>@key.CountFiles()</td>
                </tr>
            }
        </tbody>
    </table>

    <script src="mermaid.min.js"></script>
    <script>mermaid.initialize({startOnLoad:true});</script>

    <small>Generated  by https://www.nuget.org/packages/NetPackageAnalyzerConsole </small>
</body>
</html>