@inherits RazorBlade.PlainTextTemplate<Tuple<InfoSolution,ProjectsDict, DisplayDataMoreThan1Version, ClassesRefData,PublicClassRefData,AssemblyDataFromMSFT, PackageProblemsDTO>>;
@{
    var prefix = GlobalsForGenerating.globalPrefix();
    var gitInfo = GlobalsForGenerating.gitInfo;
    string repUrl = gitInfo?.Repository??"";
    var nameSolution = GlobalsForGenerating.NameSolution;
    var info = Model.Item1;
    var projectDicts = Model.Item2;
    var nrProjectsNoTests = info.nrProjects - info.nrTestProjects;
    var more1Version = Model.Item3;
    var refSummary = Model.Item4;
    var publicClassRefData = Model.Item5;
    var assemblyDataFromMSFT = Model.Item6;
    var dtoPackages = Model.Item7;
    var namePerCountPackages = dtoPackages.NamePerCounts();
    var publicClasses = new NamePerCountArray(publicClassRefData.Assemblies_PublicClasses, true);
    var mostPublicClasses = publicClasses.First1();
    var maxAssemblyRef = refSummary.AssembliesReferences?.FirstOrDefault();
    
    var keysPackageMultiple = more1Version?.KeysPackageMultipleMajorDiffers()??[];
    namePerCountPackages= namePerCountPackages
        .Append(new NamePerCount("MultipleVersions", keysPackageMultiple.Length))
        .Append(new NamePerCount("TotalPackages", projectDicts.Packages()?.Length??0))
        .ToArray();
    var namePerCountPackagesDisplay = new NamePerCountDisplay(Tuple.Create(new NamePerCountArray(namePerCountPackages,true),"Problems Package"));

    var nrVersionIterator = 0;
    var yearCommitsFolder = projectDicts.CommitsPerYearFolder();
    var yearCommitsFile = projectDicts.CommitsPerYearFile();
    int? maxCommitYear = yearCommitsFolder.Count == 0 ? null : yearCommitsFolder.Max(x => x.Key);
    int? minCommitYear = yearCommitsFolder.Count == 0 ? null : yearCommitsFolder.Min(x => x.Key);
    var currentYear = DateTime.Now.Year;
    var yearWithFolders = projectDicts.CommitsYearFolders();
    var maxCommitString = "";
    if (maxCommitYear != currentYear)
    {
        maxCommitString = $"<Highlight color='red'>{maxCommitYear}</Highlight>";
    }
    else
    {
        maxCommitString = "this year," + currentYear;
    }
    var maxCommitFiles = projectDicts.CommitsWithMaxFiles(null);
    NamePerCountArray topFiles = projectDicts.FilesWithMaxCommitsAdv(null) ?? NamePerCountArray.Empty;
    var medianCommits = projectDicts.MedianCommits(null);
    var filewithMaxCommits = topFiles?.First1();
    Tuple<NamePerCountArray, string> tuple;
    Tuple<string, NamePerCountArray, int, int, bool> tupleThreshold;
    NamePerCountDisplayThreshold namePerCountDisplayThreshold;
    NamePerCountDisplay namePerCountDisplay;
    MatrixProjects matrixProjects = new(projectDicts);
    YEARNamePerCountDisplay yearFolders = new(yearWithFolders);
    Radar radar = new(Tuple.Create(projectDicts, publicClassRefData, assemblyDataFromMSFT, "andrei"));
    var bb0 = projectDicts.BuildingBlocks(0);
    var testProjects = projectDicts.TestsProjects;
    var rootProjects = projectDicts.RootProjects;

    var execAssLines = new NamePerCountArray(
        assemblyDataFromMSFT
        .AssemblyMetric(eMSFTMetrics.ExecutableLines)
        , true);
    ;


    var execClassLines = new NamePerCountArray(assemblyDataFromMSFT
        .ClassesMetrics(eMSFTMetrics.ExecutableLines), true);
    ;



    var execMethodsLines = new NamePerCountArray(assemblyDataFromMSFT
        .MethodsMetrics(eMSFTMetrics.ExecutableLines), true);




    var nrClassesPerAssembly = new NamePerCountArray(assemblyDataFromMSFT
        .AssemblyNumberClasses(), true);

    var nrMethodsPerAssembly = new NamePerCountArray(assemblyDataFromMSFT
        .AssemblyNumberMethods(), true);


    var nrMethodsPerClass = new NamePerCountArray(assemblyDataFromMSFT
        .ClassNumberMethods(), true);

    var maintAssIndex = new NamePerCountArray(assemblyDataFromMSFT
        .AssemblyMetric(eMSFTMetrics.MaintainabilityIndex), false);

    var maintAssDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Maintainability for Assembly", maintAssIndex, 10, 20, false));


    var maintClassIndex = new NamePerCountArray(assemblyDataFromMSFT
        .ClassesMetrics(eMSFTMetrics.MaintainabilityIndex), false
    );

    var maintClassDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Maintainability for Class", maintClassIndex, 10, 20, false));

    var maintMethodIndex = new NamePerCountArray(assemblyDataFromMSFT
    .MethodsMetrics(eMSFTMetrics.MaintainabilityIndex), false
    );


    var maintMethodDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Maintainability for Method", maintMethodIndex, 10, 20, false));

    var CCAssIndex = new NamePerCountArray(assemblyDataFromMSFT
        .AssemblyMetric(eMSFTMetrics.ClassCoupling), true
    );

    var CCAssDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Class Coupling for Assembly", CCAssIndex, 0, 10, true));

    var CCClassIndex = new NamePerCountArray(assemblyDataFromMSFT
    .ClassesMetrics(eMSFTMetrics.ClassCoupling), true
    );

    var CCClassDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Class Coupling for Class", CCClassIndex, 0, 10, true));




    var CycAssIndex = new NamePerCountArray(assemblyDataFromMSFT
    .AssemblyMetric(eMSFTMetrics.CyclomaticComplexity), true
    );

    var CycAssDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Cyclomatic Complexity for Assembly", CycAssIndex, 10, 25, true));

    var CycClassIndex = new NamePerCountArray(assemblyDataFromMSFT
        .ClassesMetrics(eMSFTMetrics.CyclomaticComplexity), true
    );


    var CycClassDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Cyclomatic Complexity for Class", CycClassIndex, 10, 25, true));


    var CycMethodIndex = new NamePerCountArray(assemblyDataFromMSFT
    .MethodsMetrics(eMSFTMetrics.CyclomaticComplexity), true);

    var CycMethodDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Cyclomatic Complexity for Method", CycMethodIndex, 10, 25, true));

    var packages = new NamePerCountArray(projectDicts.Packages(), true);
    var topPackages = packages.DataOrdered().Take(7).ToArray();
    int tableRow = 0;

}

<html lang="en">
<head>
    <meta charset="utf-8">
    <script type="text/javascript" src="echarts.min.js"></script>
    @* <script type="text/javascript" src="vis-network.min.js"></script> *@
    <script type="text/javascript" src="tabulator.min.js"></script>
    <link rel="stylesheet" href="tabulator.min.css" />
    <link rel="stylesheet" href="tabulator.theme.min.js" />
    <script src="driver.js.iife.js"></script>
    <link rel="stylesheet" href="driver.css" />
    <style>
        table thead tr {
            background-color: #ffcccb; /* Light red */
            color: black;
        }

        table tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        table tbody tr:nth-child(odd) {
            background-color: #d1e7dd;
        }

        .containerDisplayInfo {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .justTextLeft {
            text-align: left;
        }

        .left, .center, .right {
            width: 30%;
            text-align: center;
        }
    </style>
</head>
<body>

    <div class="containerDisplayInfo">
        <div class="left">
            <h2 id="general-info">Solution Info</h2>
            <table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#projects-with-tests">Number projects : @info.nrProjects</a>
                            (<a href="#play-with-solution-relations"> tests </a>: @info.nrTestProjects,
                            <a href="#projects-without-tests"> total </a>: @info.nrProjects
                            )
                        </td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#building-blocks"> Building Blocks </a>: @bb0.Length
                        </td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#root-projects"> Root Projects </a>: @rootProjects.Length
                        </td>
                    </tr>

                    <tr>
                        <td>@(++tableRow)</td>
                        <td>

                            <a href="#packages-per-project-table">Number packages</a> : @info.nrPackages
                            (<a href="#packages-with-outdated">
                                Outdated
                            </a> @info.nrOutdated
                            ,<a href="#packages-with-deprecated">
                                Deprecated
                            </a>: @info.nrDeprecated,
                            ,<a href="#packages-with-major-version-different">Major version differs</a> :@info.nrMajorDiffers
                            ,<a href="#packages-with-vulnerable">
                                Vulnerable
                            </a> : @info.nrVulnerable
                            )
                        </td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#number-of-classes-per-assembly">
                                Number classes
                            </a>: @assemblyDataFromMSFT.NumberOfClasses()
                        </td>

                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#number-of-methods-per-assembly">
                                Number methods
                            </a>: @assemblyDataFromMSFT.NumberOfMethods()
                        </td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#licences-per-project"> Licenses</a>: @projectDicts.NrLicenses()
                        </td>
                    </tr>

            </table>
        </div>
        <div class="center">
            <h1 id="summary">
                <a href="https://www.nuget.org/packages/NetPackageAnalyzerConsole" target="_blank">
                    Summary
                </a>
                <a href="@repUrl" target="_blank">@nameSolution</a>
                
            </h1>
            <div class="justTextLeft">

            <h2>If you are new to the project</h2>
            <ol>
                <li>
                    Goto <a href="#building-blocks"> Building Blocks </a>  @bb0.Length - you can understand those projects without references
                </li>
                <li>Goto <a href="#root-projects"> Root Projects </a> @rootProjects.Length - see the starting projects
                <li>
                    Goto
                    <a href="#test-projects-table">TestProjects</a> @testProjects.Length - see what other projects they are testing

                </li>
                <li>
                    See
                    <a href="#projects-with-tests">relation of the projects</a>
                </li>
                <li><a href="#number-of-classes-per-assembly">Projects with least classes</a>  </li>

            </ol>
            <h2>If you want to improve the project</h2>
            <ol>
                <li>
                    See <a href="#packages-with-major-version-different">Packages with Major Version different</a>
                </li>
                <li>
                    See <a href="#Cyclomatic-Complexity-for-Method">
                        methods with most cyclomatic complexity
                    </a>
                </li>

                <li>
                    See <a href="#Maintainability-for-Method">
                        methods low maintaining score
                    </a>
                </li>
                <li>
                    See <a href="#executable-lines-per-method">
                        methods with most lines
                    </a>
                </li>
                <li><a href="#number-of-classes-per-assembly">Projects with most classes</a>  </li>

                <li>
                    <a href="#Public-methods-per-class-table">
                        Classes with most public methods
                    </a>
                </li>
                <li>
                    <a href="#number-of-methods-per-class">
                        Classes with max nr of methods
                    </a>
                </li>
            </ol>
                </div>
        </div>
        <div class="right">
            <h2>Info Repo & Commits</h2>
            @{
                tableRow = 0;
            }
            <table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>


                    </tr>
                </thead>
                <tbody>
                    @if (gitInfo != null)
                    {
                        <tr>
                            <td>@(++tableRow)</td>
                            <td>
                                Repo   <a href="@gitInfo!.Repository" target="_blank">@gitInfo!.Repository</a>
                            </td>
                        </tr>
                        <tr>
                            <td>@(++tableRow)</td>
                            <td>
                                branch <i>@gitInfo?.Branch</i> , commit <i>@gitInfo?.Commit</i>
                            </td>
                        </tr>


                    }

                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#commits">
                                Total Commits : @info.totalCommits
                        </td>
                    </tr>

                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#Commits-per-year-and-folder">
                                last commit
                            </a> : @maxCommitString
                        </td>
                    </tr>

                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#maxCommitFilesPerYear">
                                The commit with max files
                            </a>
                            ( @maxCommitFiles.CountFiles()  ) is sha @(maxCommitFiles.sha) on @maxCommitFiles.date.ToString("yyyy MMMM dd") )
                        </td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#file-with-commits">
                                The file with most commits
                            </a>( @filewithMaxCommits?.Count )  is @(filewithMaxCommits?.Name)
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>
    <div class="containerDisplayInfo">
        <div class="left">
            <h2 id="assembly-info">Assembly Info</h2>
            @{
                tableRow = 0;
            }
            <table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>
                        <th>Assembly Name</th>

                    </tr>
                </thead>
                <tbody>
                    @if (maxAssemblyRef != null)
                    {
                        <tr>
                            <td>@(++tableRow)</td>
                            <td>
                                <a href="#assemblies-references">Max nr of references to other assemblies</a>:@maxAssemblyRef.Count
                            </td>
                            <td>@maxAssemblyRef.Name</td>
                        </tr>
                    }
                    @if (mostPublicClasses != null)
                    {
                        <tr>
                            <td>@(++tableRow)</td>
                            <td>
                                <a href="#assemblies-public-classes">
                                    Max nr of public Classes
                                </a>:@mostPublicClasses.Count
                            </td>
                            <td>@mostPublicClasses.Name</td>
                        </tr>
                    }
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#number-of-classes-per-assembly">
                                With max nr of Classes
                            </a>:@nrClassesPerAssembly.First1()?.Count
                        </td>
                        <td>@nrClassesPerAssembly.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#number-of-methods-per-assembly">
                                With max nr of methods
                            </a>:@nrMethodsPerAssembly.First1()?.Count
                        </td>
                        <td>@nrMethodsPerAssembly.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#Maintainability-for-Assembly">
                                With low maintaining score
                            </a>:@maintAssIndex.First1()?.Count

                        </td>
                        <td>@maintAssIndex.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td><a href="#Class-Coupling-for-Assembly"> With max coupling</a>:@CCAssIndex.First1()?.Count</td>
                        <td>@CCAssIndex.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#Cyclomatic-Complexity-for-Assembly">
                                With most Cyclomatic Complexity
                            </a>:@CycAssIndex.First1()?.Count
                        </td>
                        <td>@CycAssIndex.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td><a href="#executable-lines-per-assembly">With most lines</a>:@execAssLines.First1()?.Count</td>
                        <td>@execAssLines.First1()?.Name</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="center">
            <h2 id="class-info">Class Info</h2>
            @{
                tableRow = 0;
            }<table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>
                        <th>Class name</th>

                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#number-of-methods-per-class">
                                With max nr of methods
                            </a>:@nrMethodsPerClass.First1()?.Count
                        </td>
                        <td>@nrMethodsPerClass?.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#Maintainability-for-Class">
                                With low maintaining score
                            </a>:@maintClassIndex.First1()?.Count
                        </td>
                        <td>@maintClassIndex.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#Class-Coupling-for-Class">
                                With max coupling
                            </a>
                            :@CCClassIndex.First1()?.Count
                        </td>
                        <td>@CCClassIndex.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#Cyclomatic-Complexity-for-Class">
                                With most Cyclomatic Complexity
                            </a>:@CycClassIndex.First1()?.Count
                        </td>
                        <td>@CycClassIndex.First1()?.Name</td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            <a href="#executable-lines-per-class">
                                With most lines:@execClassLines.First1()?.Count
                            </a>
                        </td>
                        <td>@execClassLines.First1()?.Name</td>
                    </tr>

                </tbody>
            </table>
        </div>
        <div class="right">
            @{
                tableRow = 0;
            }
            <h2 id="method-info">Method Info</h2>
            <table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>
                        <th>Method name</th>

                    </tr>
                </thead>
                <tr>

                    <td>@(++tableRow)</td>
                    <td>
                        <a href="#executable-lines-per-method">
                            Method with max lines
                        </a>:@execMethodsLines.First1()?.Count
                    </td>
                    <td>@execMethodsLines.First1()?.Name</td>
                </tr>
                <tr>
                    <td>@(++tableRow)</td>
                    <td>
                        <a href="#Maintainability-for-Method">
                            With low maintaining score
                        </a>:@maintMethodIndex.First1()?.Count
                    </td>
                    <td>@maintMethodIndex.First1()?.Name</td>
                </tr>

                <tr>
                    <td>@(++tableRow)</td>
                    <td>
                        <a href="#Cyclomatic-Complexity-for-Method">
                            With most Cyclomatic Complexity
                        </a>:@CycMethodIndex.First1()?.Count
                    </td>
                    <td>@CycMethodIndex.First1()?.Name</td>
                </tr>



            </table>
        </div>
    </div>
    <br />
    <br />
    <h1 id="radar-summary">Radar @nameSolution</h1>

    @radar.Render()


    @*
    <h1>Packages relations</h1>
    <div id="solRelPackages" ></div>

    <script type="text/javascript">
    var dot='digraph { rankdir=TB ';
    @foreach(var prj in projectDicts.Values)
    {
    <text>
    dot+='"@prj.PathProject" [label="@prj.NameCSproj() : @prj.Packages.Count",color="red"]\r\n';
    </text>
    }
    @foreach(var pack in topPackages)
    {
    <text>
    dot+='"@pack.Name" [label="@pack.Name : @pack.Count" ,shape="box"]\r\n';
    </text>
    }

    @foreach (var proj in projectDicts.Values)
    {
    foreach (var rel in proj.Packages)
    {
    if(!topPackages.Any(it=>it.Name==rel.packageVersionId))
    {
    continue;
    }
    <text>
    dot+='"@proj.PathProject"  -> "@rel.packageVersionId"\r\n'
    </text>

    }

    foreach (var rel in proj.ProjectsReferences)
    {

    <text>
    dot+='"@proj.PathProject"  -> "@rel.PathProject"\r\n'
    </text>

    }
    }
    dot+="}";
    var dom = document.getElementById('solRelPackages');
    var data = vis.parseDOTNetwork(dot);
    var network = new vis.Network(dom, data);
    </script>
    *@
    <br />
    <h2 id="matrix-projects">Matrix Projects</h2>
    @matrixProjects.Render()

    <h2 id="projects-without-tests"> @nrProjectsNoTests Projects (not counting tests projects!)</h2>
    <div class="mermaid" title="image projects without tests">
        flowchart LR


        @foreach (var proj in projectDicts.AlphabeticOrderedProjectsNoTests)
        {
            var nameCsproj = proj.NameCSproj();
            var relativePath = proj.RelativePath();
            var comment = $"%% start project reference {relativePath}";
            <text>

                @comment
                @if (proj.AlphabeticalProjectsReferences().Length == 0)
                {
                    <text>
                        @nameCsproj
                    </text>
                }

                @foreach (var rel in proj.AlphabeticalProjectsReferences())
                {
                    <text>
                        @nameCsproj-->@rel.NameCSproj()

                    </text>

                }
            </text>
        }
    </div>

    <h2 id="projects-with-tests"> @info.nrProjects Projects with tests</h2>
    <div class="mermaid" title="image projects with tests">
        flowchart LR


        @foreach (var proj in projectDicts.AlphabeticOrderedProjects)
        {
            var nameCsproj = proj.NameCSproj();
            var relativePath = proj.RelativePath();
            var comment = $"%% start project reference {relativePath}";
            <text>

                @comment
                @if (proj.AlphabeticalProjectsReferences().Length == 0)
                {
                    <text>
                        @nameCsproj
                    </text>
                }

                @foreach (var rel in proj.AlphabeticalProjectsReferences())
                {
                    <text>
                        @nameCsproj-->@rel.NameCSproj()

                    </text>

                }
            </text>
        }
    </div>

    @*  <h2 id="play-with-solution-relations">Play with solution relations</h2>
    <div id="solRel"></div>

    <script type="text/javascript">
    var dot = 'digraph {  ';
    @foreach (var prj in projectDicts.Values)
    {
    <text>
    dot+='"@prj.PathProject" [label="@prj.NameCSproj() : @prj.ProjectsReferences.Count"]\r\n';
    </text>
    }
    @foreach (var proj in projectDicts.Values)
    {

    foreach (var rel in proj.ProjectsReferences)
    {

    <text>
    dot+='"@proj.PathProject"  -> "@rel.PathProject"\r\n'
    </text>

    }
    }
    dot+="}";
    var dom = document.getElementById('solRel');
    var data = vis.parseDOTNetwork(dot);
    var network = new vis.Network(dom, data);
    </script>
    *@

    <h2 id="building-blocks">Building Blocks : @bb0.Length </h2>
    @{
        int projectNr = 0;
        foreach (var bbProj in bb0)
        {
            var nameCsproj = bbProj.NameCSproj();
            var relativePath = bbProj.RelativePath();
            <text>
                <h3>Project: @nameCsproj</h3>
                Full Name : @relativePath

                <div class="mermaid" title="image project bb0 @(++projectNr)">
                    flowchart LR
                    @nameCsproj
                    @foreach (var rel in bbProj.AlphabeticalUpStreamProjectReferences)
                    {
                        <text>
                            @rel.FullNameMermaid()
                            @rel.NameCSproj()-->@nameCsproj
                        </text>
                    }

                </div>

            </text>
        }
    }
    <div id="bb-table"></div>

    <script>
        var tabledata = [
        @foreach (var bbProj in bb0)
        {
            var nameCsproj = bbProj.NameCSproj();
            string refTo = "";
            foreach (var rel in bbProj.AlphabeticalUpStreamProjectReferences)
            {
                refTo += rel.NameCSproj() + ";";
            }
            <text>
                    {"Name": "@nameCsproj", "RelProj": "@refTo" },
            </text>
        }
                        ];
        var table = new Tabulator("#bb-table", {
            data: tabledata,
            layout: "fitColumns",
            pagination: "local",
            paginationSize: 10,
            paginationSizeSelector: [10, 20],
            movableColumns: true,
            paginationCounter: "rows",
            columns: [
                { formatter: "rownum", hozAlign: "center", width: 40 },
                { title: "Name", field: "Name", headerFilter: "input" },
                { title: "Related Projects", field: "RelProj", headerFilter: "input" },
            ],
        });

    </script>

    <h2 id="root-projects">Root projects : @rootProjects.Length </h2>
    @{
        int nrRootProjects = 0;
        foreach (var bbProj in rootProjects)
        {
            var nameCsproj = bbProj.NameCSproj();
            var relativePath = bbProj.RelativePath();
            <text>
                <h3>Project: @nameCsproj</h3>
                Full Name : @relativePath

                <div class="mermaid" title="image root project @(++nrRootProjects)">
                    flowchart LR
                    @nameCsproj
                    @foreach (var rel in bbProj.ProjectsReferences)
                    {
                        <text>
                            @rel.FullNameMermaid()
                            @rel.NameCSproj()-->@nameCsproj
                        </text>
                    }

                </div>

            </text>
        }
    }
    <div id="root-projects-table"></div>

    <script>
        var tabledata = [
        @foreach (var bbProj in rootProjects)
        {
            var nameCsproj = bbProj.NameCSproj();
            string refTo = "";
            foreach (var rel in bbProj.ProjectsReferences)
            {
                refTo += rel.NameCSproj() + ";";
            }
            <text>
                    {"Name": "@nameCsproj", "RelProj": "@refTo" },
            </text>
        }
                                ];
        var table = new Tabulator("#root-projects-table", {
            data: tabledata,
            layout: "fitColumns",
            pagination: "local",
            paginationSize: 10,
            paginationSizeSelector: [10, 20],
            movableColumns: true,
            paginationCounter: "rows",
            columns: [
                { formatter: "rownum", hozAlign: "center", width: 40 },
                { title: "Name", field: "Name", headerFilter: "input" },
                { title: "Related Projects", field: "RelProj", headerFilter: "input" },
            ],
        });

    </script>


    <h2 id="test-projects">Test projects: @(testProjects.Length) </h2>
    @{
        int nrTestProjects = 0;
        foreach (var bbProj in testProjects)
        {
            var nameCsproj = bbProj.NameCSproj();
            var relativePath = bbProj.RelativePath();
            <text>
                <h3>Project: @nameCsproj</h3>
                Full Name : @relativePath

                <div class="mermaid" title="image test project @(++nrTestProjects)">
                    flowchart LR
                    @nameCsproj
                    @foreach (var rel in bbProj.AlphabeticalProjectsReferences())
                    {
                        <text>
                            @rel.FullNameMermaid()
                            @rel.NameCSproj()-->@nameCsproj
                        </text>
                    }

                </div>

            </text>
        }
    }
    <div id="test-projects-table"></div>

    <script>
        var tabledata = [
        @foreach (var bbProj in testProjects)
        {
            var nameCsproj = bbProj.NameCSproj();
            string refTo = "";
            foreach (var rel in bbProj.AlphabeticalProjectsReferences())
            {
                refTo += rel.NameCSproj() + ";";
            }
            <text>
                    {"Name": "@nameCsproj", "RelProj": "@refTo" },
            </text>
        }
                                ];
        var table = new Tabulator("#test-projects-table", {
            data: tabledata,
            layout: "fitColumns",
            pagination: "local",
            paginationSize: 10,
            paginationSizeSelector: [10, 20],
            movableColumns: true,
            paginationCounter: "rows",
            columns: [
                { formatter: "rownum", hozAlign: "center", width: 40 },
                { title: "Name", field: "Name", headerFilter: "input" },
                { title: "Related Projects", field: "RelProj", headerFilter: "input" },
            ],
        });

    </script>






    <h2 id="maintainability">Maintainability</h2>
    <h3>Maintainability per assembly</h3>
    @maintAssDisplay.Render()

    <h3>Maintainability per class</h3>
    @maintClassDisplay.Render()

    <h3>Maintainability per method</h3>
    @maintMethodDisplay.Render()

    <h2 id="coupling">Coupling</h2>
    <h3>Coupling per assembly</h3>
    @CCAssDisplay.Render()
    <h3>Coupling per Class</h3>
    @CCClassDisplay.Render()

    <h2 id="Cyclomatic-Complexity">Cyclomatic Complexity</h2>
    <h3>Cyclomatic Complexity per assembly</h3>
    @CycAssDisplay.Render()

    <h3>Cyclomatic Complexity per class</h3>
    @CycClassDisplay.Render()

    <h3>Cyclomatic Complexity per method</h3>
    @CycMethodDisplay.Render()


    <h2 id="number-of-classes-per-assembly"> Number of classes per assembly</h2>
    @{
        tupleThreshold = new("Number class per project", nrClassesPerAssembly, 25, 50, true);

        namePerCountDisplayThreshold = new(tupleThreshold);
    }

    @namePerCountDisplayThreshold.Render()

    <h2 id="number-of-methods-per-assembly"> Number of methods per assembly</h2>

    @{
        tupleThreshold = new("Number methods per project", nrMethodsPerAssembly, 50, 200, true);

        namePerCountDisplayThreshold = new(tupleThreshold);
    }

    @namePerCountDisplayThreshold.Render()
    <h2 id="number-of-methods-per-class"> Number of methods per class</h2>

    @{
        tupleThreshold = new("Number methods per class", nrMethodsPerClass!, 20, 70, true);

        namePerCountDisplayThreshold = new(tupleThreshold);
    }

    @namePerCountDisplayThreshold.Render()

    <h2 id="licences-summary-table-h2">Summary Licences</h2>
    <div id="licences-summary-table"></div>

    <script>
        var tabledata = [
        @foreach (var lic in projectDicts.Licenses())
        {
            <text>
                    {"Name": "@lic.Name.Replace("\\", "\\\\")", "Licenses": "@lic.Count" },
            </text>
        }
                                        ];
        var table = new Tabulator("#licences-summary-table", {
            data: tabledata,
            layout: "fitColumns",
            columns: [
                { formatter: "rownum", hozAlign: "center", width: 40 },
                { title: "Name", field: "Name", headerFilter: "input" },
                { title: "Licenses", field: "Licenses", headerFilter: "input" },
            ],
        });
    </script>

    <h2 id="licences-per-project">Licences per project</h2>


    <div id="licences-per-project-table"></div>

    <script>
        var tabledata = [];
        @{
            foreach (var prj in projectDicts.AlphabeticOrderedProjects)
            {
                foreach (var lic in prj.Licenses())
                {

                    <text>
                            tabledata.push({"Name": "@prj.NameCSproj()", "License": "@lic.Name.Replace("\\", "\\\\")" ,"Nr":@lic.Count  });
                    </text>
                }
            }
        }
                        var table = new Tabulator("#licences-per-project-table", {
                data: tabledata,
                layout: "fitColumns",
                pagination: "local",
                paginationSize: 10,
                paginationSizeSelector: [10, 20, 100, 200],
                movableColumns: true,
                paginationCounter: "rows",
                columns: [
                    { formatter: "rownum", hozAlign: "center", width: 40 },
                    { title: "Name", field: "Name", headerFilter: "input" },
                    { title: "License", field: "License", headerFilter: "input" },
                    { title: "Number", field: "Nr", headerFilter: "input" },
                ],
            });

    </script>

    <h2 id="licences-per-project-and-package">Project, package, licenses</h2>
    <div id="licences-per-project-and-package-table"></div>
    <script>
        var tabledata = [];
        @{

            foreach (var lic in projectDicts.Licenses())
            {
                var licName = lic.Name;
                var licCount = lic.Count;
                foreach (var prj in projectDicts.AlphabeticOrderedProjects)
                {
                    string prjName = prj.NameCSproj();
                    var licData = prj.NamePerCountLicences(lic.Name);
                    if (licData.Length == 0) { continue; }
                    foreach (var licPrj in licData)
                    {
                        <text>
                                tabledata.push({
                                    "LicenseName":"@licName.Replace("\\", "\\\\")",
                                "Project":"@prjName ",
                                "Package":"@licPrj.Name"
                                                                                                });
                        </text>
                    }
                }
            }
        }
        var table = new Tabulator("#licences-per-project-and-package-table", {
                data: tabledata,
                layout: "fitColumns",
                pagination: "local",
                paginationSize: 10,
                paginationSizeSelector: [10, 20, 100, 200],
                movableColumns: true,
                paginationCounter: "rows",
                columns: [
                    { formatter: "rownum", hozAlign: "center", width: 40 },
                    { title: "Project", field: "Project", headerFilter: "input" },
                    { title: "Package", field: "Package", headerFilter: "input" },
                    { title: "LicenseName", field: "LicenseName", headerFilter: "input" },
                ],
            });


    </script>
    <h2 id="packages-per-project">Packages : @projectDicts.Packages()?.Length </h2>
    <div id="packages-per-project-table"></div>
    <script>
        var tabledata = [];
        @foreach (var prj in projectDicts.AlphabeticOrderedProjects)
        {
            string nameCsproj = prj.NameCSproj();
            var packs = prj.Packages;
            foreach (var pack in packs)
            {
                <text>
                        tabledata.push({
                            "Project": "@nameCsproj",
                        "Package": "@pack.packageVersionId",
                            });
                </text>
            }
        }

                var table = new Tabulator("#packages-per-project-table", {
                data: tabledata,
                layout: "fitColumns",
                pagination: "local",
                paginationSize: 10,
                paginationSizeSelector: [10, 20, 100, 200, 500],
                movableColumns: true,
                paginationCounter: "rows",
                columns: [
                    { formatter: "rownum", hozAlign: "center", width: 40 },
                    { title: "Project", field: "Project", headerFilter: "input" },
                    { title: "Package", field: "Package", headerFilter: "input" },
                ],
            });
    </script>
    @namePerCountPackagesDisplay.Render()

    <h2 id="packages-with-vulnerable">@info.nrVulnerable Packages vulnerable</h2>
    @{

        var tt1 = Tuple.Create("Vulnerable Packages", dtoPackages.Vuln());
        var pp1 = new PackagesProblems(tt1);
    }
    @pp1.Render()

    <h2 id="packages-with-outdated">@info.nrOutdated Packages outdated</h2>
    @{

        var tt2 = Tuple.Create("Outdated Packages", dtoPackages.Out());
        var pp2 = new PackagesProblems(tt2);
    }
    @pp2.Render()

    <h2 id="packages-with-deprecated">@info.nrDeprecated Packages deprecated</h2>
    @{

        var tt3 = Tuple.Create("Deprecated Packages", dtoPackages.Depr());
        var pp3 = new PackagesProblems(tt3);
    }
    @pp3.Render()


    <h2 id="packages-with-major-version-different">@keysPackageMultiple.Length Packages with major version different</h2>
    @if (keysPackageMultiple.Length > 0)
    {
        var nl = Environment.NewLine;
        nrVersionIterator = 0;
        <div id="major-differs-table" title="image major-differs-table" )"></div>
        <script>
            var tabledata = [];

            @foreach (var key in keysPackageMultiple)
            {
                nrVersionIterator++;
                var pack = more1Version!.IDPackageWithProjects[key]!;
                pack.VerifyWhy();
                var childrenArr = pack.Why.Select(x => $"{{ {nl} Name : '{x.ProjectName()}'  , {nl}  Why :`{nl} <pre>{x.WhyText}<pre>`}}");
                var children = string.Join(",", childrenArr);

                var vals = pack.VersionsPerProject;
                var majorDiff = pack.MajorVersionDiffer();
                string textReferences = vals.Count > 1 ? $" (References: {vals.Count}) " : "";
                string diffMajor = majorDiff ? $"<span style='color:red'> <b>Major differs</b> </span>" : "";
                string refs = "";
                @foreach (var vers in vals)
                {

                    refs += " <b>" + vers.Key + "</b> " + string.Join(",", vers.Value.Select(it => it.NameCSproj()).ToArray());
                    @* @(vers.Key) @("&nbsp;") @(string.Join(",",vers.Value.Select(it=>it.NameCSproj()))) *@
                    refs += "<br/>";
                }


                <text>
                        tabledata.push({
                            "Name": "@key <br /> @textReferences @diffMajor",
                        "Why": "@refs",
                        "_children":[@children]
                                    });
                </text>
            }
                        var table = new Tabulator("#major-differs-table", {
                data: tabledata,
                dataTree: true,
                dataTreeStartExpanded: false,
                layout: "fitColumns",
                pagination: "local",
                paginationSize: 10,
                paginationSizeSelector: [10, 20, 50, 100],
                movableColumns: true,
                paginationCounter: "rows",
                columns: [
                    { formatter: "rownum", hozAlign: "center", width: 40 },
                    {
                        title: "Name", formatter: "html", field: "Name",
                        cellClick: function(e, cell) {
                            //window.alert('expand me');
                            cell.getRow().treeToggle();
                        }

                    },
                    {
                        title: "Expand/Collapse Projects",
                        field: "Why",
                        formatter: "html",
                        cellClick: function(e, cell) {
                            cell.getRow().treeToggle();
                        }
                    }
                ]
            });
        </script>

    }
    <h2 id="executable-lines">Executable lines</h2>
    <h3 id="executable-lines-per-assembly">Per assembly</h3>
    @{
        tupleThreshold = new("Number exec lines per project", execAssLines, 1000, 2000, true);
        namePerCountDisplayThreshold = new(tupleThreshold);
    }
    @namePerCountDisplayThreshold.Render()

    <h3 id="executable-lines-per-class">Per class</h3>

    @{
        tupleThreshold = new("Number exec lines per class", execClassLines, 100, 200, true);

        namePerCountDisplayThreshold = new(tupleThreshold);

    }

    @namePerCountDisplayThreshold.Render()


    <h3 id="executable-lines-per-method">Per method</h3>

    @{
        tupleThreshold = new("Number exec lines per method", execMethodsLines, 50, 100, true);

        namePerCountDisplayThreshold = new(tupleThreshold);

    }

    @namePerCountDisplayThreshold.Render()

    <h2 id="summary-of-project-public-classes">Summary of project public classes</h2>
    @if (mostPublicClasses != null)
    {
        <text>


            <h3 id="assemblies-public-classes"> Assemblies with number of public classes</h3>

            @{
                tuple = new(new(publicClassRefData.Assemblies_PublicClasses ?? [], true), "Public class per project");
                namePerCountDisplay = new(tuple);
            }

            @namePerCountDisplay.Render()

            <h3 id="assemblies-public-methods"> Assemblies with Public methods</h3>

            @{
                tupleThreshold = new("Public methods per assembly", new(publicClassRefData.Assemblies_PublicMethods ?? [], true), 100, 200, true);

                namePerCountDisplayThreshold = new(tupleThreshold);
            }

            @namePerCountDisplayThreshold.Render()


            <h3 id="classes-public-methods"> Classes with Public methods</h3>


            @{
                tupleThreshold = new("Public methods per class", new(publicClassRefData.Class_PublicMethods ?? [], true), 10, 20, true);

                namePerCountDisplayThreshold = new(tupleThreshold);

            }

            @namePerCountDisplayThreshold.Render()

            @* <h2 id="lines-summary">Lines summary</h2> *@

            @*             <h3 id="assemblies-public-lines">Assemblies with most lines in public classses</h3>
        @{
        tuple = new(publicClassRefData.Assemblies_MostLinesInPublicClass??[], "Number lines in public class per assembly");
        namePerCountDisplay = new(tuple);
        }

        @namePerCountDisplay.Render()
        *@
            @*
        <h3 id="class-public-lines">Public Classes with most lines</h3>
        @{
        tuple = new(publicClassRefData.PublicClass_MostLinesOfCode??[], "Number lines per public class");
        namePerCountDisplay = new(tuple);
        }

        @namePerCountDisplay.Render()
        *@


        </text>

    }
    <h2 id="references-between-projects"> References between projects</h2>

    <h3 id="assemblies-references"> Assemblies with References</h3>
    @{
        tuple = new(new(refSummary.AssembliesReferences ?? [], true), "References per assembly");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()
    <h3 id="class-references"> Classes with References</h3>

    @{
        tuple = new(new(refSummary?.classRefs ?? [], true), "References per class");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()

    <h2 id="commits"> Commits</h2>
    <h3> Commits per year</h3>
    @if (yearCommitsFolder.Count > 0)
    {

        var xaxis = "[" +
        string.Join(',', yearCommitsFolder
        .Select(it => it.Key)
        .OrderBy(x => x)
        .ToArray()) + "]";
        var maxCommit = yearCommitsFolder.Max(x => x.Value);
        var commitsFolder = "[" + string.Join(',', yearCommitsFolder
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
        var CommitsFile = "[" + string.Join(',', yearCommitsFile
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
        <text>
            <div class="mermaid" title="image Commits per year">
                xychart-beta
                title "Commits per year (folder and csproj)"
                x-axis @xaxis
                y-axis "" 0--> @maxCommit
                bar @commitsFolder
                bar @CommitsFile
            </div>

        </text>

        <h3 id="Commits-per-year-and-folder"> Commits per year and folder </h3>

        @yearFolders.Render()

        <h3 id="file-with-commits">Commits per file</h3>
        <text>
            @{
                tuple = new(topFiles!, "Files with commits");
                namePerCountDisplay = new(tuple);

            }
            @namePerCountDisplay.Render();
        </text>


    }


    @{
        var maxCommitFilesPerYear = projectDicts.CommitsWithMaxFilesPerYear();
    }
    <h3 id="maxCommitFilesPerYear"> Commits with most files per year</h3>
    <table border="1">
        <thead>
            <tr>
                <th>Nr</th>
                <th>SHA</th>
                <th>Date</th>
                <th>NrFiles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in maxCommitFilesPerYear)
            {
                nrVersionIterator++;
                var key = kvp.Value;

                <tr>
                    <td>@nrVersionIterator</td>
                    <td>@key.sha</td>
                    <td>@key.date.ToString("yyyy MMM dd")</td>
                    <td>@key.CountFiles()</td>
                </tr>
            }
        </tbody>
    </table>

    <script src="mermaid.min.js"></script>
    <script>mermaid.initialize({ startOnLoad: true });</script>

    <small>
        Generated  by
        <a href="https://www.nuget.org/packages/NetPackageAnalyzerConsole" target="_blank">
            https://www.nuget.org/packages/NetPackageAnalyzerConsole
        </a>
    </small>
    <small>@GlobalsForGenerating.Version</small>
    <small> @GlobalsForGenerating.NameVersion </small>
    <small> Generated on @DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") </small>
    <script>

        const steps = [
            {
                element: '#summary',
                popover: {
                    title: 'Analysis for @nameSolution',
                    description: "Please click next to see all that is generated for @nameSolution . Click escape to exit the tour."
                }
            },
            {
                element: '#projects-with-tests',
                popover: {
                    title: 'Projects in @nameSolution : @projectDicts.Count',
                    description: 'Here you can find a diagram of your projects',
                }
            },
            {
                element: '#building-blocks',
                popover: {
                    title: 'Building blocks for @nameSolution : @bb0.Length',
                    description: 'You can start understanding the solution with those projects',
                }
            },
            {
                element: '#Commits-per-year-and-folder',
                popover: {
                    title: 'Total Commits for @nameSolution : @projectDicts.TotalCommits()',
                    description: 'Here are the commits per year and project',
                }
            }
            ,
            {
                element: '#packages-with-major-version-different',
                popover: {
                    title: 'Packages ! major for @nameSolution : @more1Version?.KeysPackageMultipleMajorDiffers()?.Length',
                    description: 'Packages with different major version , could break solution  ',
                }
            },
            {
                element: '#executable-lines-per-method',
                popover: {
                    title: 'Metrics: line count for @nameSolution',
                    description: 'Number Lines per methods for @nameSolution',
                }
            },
            {
                element: '#Maintainability-for-Method',
                popover: {
                    title: 'Metrics: Maintainability  for @nameSolution',
                    description: 'Maintainability per methods for @nameSolution',
                }
            },
            {
                element: '#number-of-methods-per-class',
                popover: {
                    title: 'Metrics: number methods  for @nameSolution',
                    description: 'Number methods per class for @nameSolution',
                }
            },

            {
                element: '#Cyclomatic-Complexity-for-Method',
                popover: {

                    title: 'Metrics: Cyclomatic complexity for @nameSolution',
                    description: 'Cyclomatic complexity  per method for @nameSolution',
                }
            }
            ,
            {
                element: '#licences-per-project-and-package',
                popover: {
                    title: 'Packages / License per project for @nameSolution',
                    description: 'List of all packages and licenses per project ',
                }
            }
            ,

            {
                element: '#summary',
                popover: {
                    title: 'Click done or press esc to close',
                    description: 'Start improving or understanding @nameSolution',
                }
            },


        ];

        const driver = window.driver.js.driver;

        const driverObj = driver({
            showProgress: true,
            steps: steps
        });

        driverObj.drive();

    </script>

</body>
</html>