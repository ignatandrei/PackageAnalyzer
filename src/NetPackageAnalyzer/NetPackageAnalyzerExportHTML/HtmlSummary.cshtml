@inherits RazorBlade.PlainTextTemplate<Tuple<InfoSolution,ProjectsDict, DisplayDataMoreThan1Version, ClassesRefData,PublicClassRefData,AssemblyDataFromMSFT>>;
@{
    var prefix = GlobalsForGenerating.globalPrefix();
    var nameSolution = GlobalsForGenerating.NameSolution;
    var info = Model.Item1;
    var projectDicts = Model.Item2;

    var nrProjectsNoTests = info.nrProjects - info.nrTestProjects;
    var more1Version = Model.Item3;
    var refSummary = Model.Item4;
    var publicClassRefData = Model.Item5;
    var assemblyDataFromMSFT = Model.Item6;
    var mostPublicClasses = publicClassRefData
    .Assemblies_PublicClasses
    .FirstOrDefault();
    var maxAssemblyRef = refSummary.AssembliesReferences.FirstOrDefault();
    
    var keysPackageMultiple = more1Version.KeysPackageMultipleMajorDiffers();
    var nrVersionIterator = 0;
    var yearCommitsFolder = projectDicts.CommitsPerYearFolder();
    var yearCommitsFile = projectDicts.CommitsPerYearFile();
    int? maxCommitYear = yearCommitsFolder.Count==0?null: yearCommitsFolder.Max(x => x.Key);
    int? minCommitYear = yearCommitsFolder.Count == 0 ? null : yearCommitsFolder.Min(x => x.Key);
    var currentYear = DateTime.Now.Year;
    var yearWithFolders = projectDicts.CommitsYearFolders();
    var maxCommitString = "";
    if (maxCommitYear != currentYear)
    {
        maxCommitString = $"<Highlight color='red'>{maxCommitYear}</Highlight>";
    }
    else
    {
        maxCommitString = "this year," + currentYear;
    }
    var maxCommitFiles = projectDicts.CommitsWithMaxFiles(null);
    var top10Files = projectDicts.FilesWithMaxCommits(null);
    var medianCommits = projectDicts.MedianCommits(null);
    KeyValuePair<string,int>? filewithMaxCommits = top10Files?.Length>0? top10Files.First():null;
    Tuple<NamePerCount[], string> tuple;
    NamePerCountDisplay namePerCountDisplay;
    YEARNamePerCountDisplay yearFolders= new(yearWithFolders);
    Radar radar = new(Tuple.Create(projectDicts, publicClassRefData, assemblyDataFromMSFT,"andrei"));
    var bb0= projectDicts.BuildingBlocks(0);

    var execAssLines = assemblyDataFromMSFT
        .AssemblyMetric(eMSFTMetrics.ExecutableLines)
        .OrderByDescending(it=>it.Count)
        .ToArray()
        ;
    var maxexecAssLines = assemblyDataFromMSFT.AssemblyMetricMax(eMSFTMetrics.ExecutableLines);

    var execClassLines = assemblyDataFromMSFT
        .ClassesMetrics(eMSFTMetrics.ExecutableLines)
        .OrderByDescending(x => x.Count)
        .ToArray();
    ;
    var maxExecClassLines = assemblyDataFromMSFT
        .ClassesMetricMax(eMSFTMetrics.ExecutableLines)

        ; 

    var execMethodsLines = assemblyDataFromMSFT
        .MethodsMetrics(eMSFTMetrics.ExecutableLines)
        .OrderByDescending(x => x.Count)
        .ToArray();

    var maxExecMethodsLines = execMethodsLines.FirstOrDefault();


    var nrClassesPerAssembly = assemblyDataFromMSFT
        .AssemblyNumberClasses()
        .OrderByDescending(it => it.Count)
        .ToArray();
    var maxClasses = nrClassesPerAssembly.First();

    var nrMethodsPerAssembly = assemblyDataFromMSFT
        .AssemblyNumberMethods()
        .OrderByDescending(it => it.Count)
        .ToArray();
    var maxMethodsAss = nrMethodsPerAssembly.First();

    var nrMethodsPerClass = assemblyDataFromMSFT
        .ClassNumberMethods()
        .OrderByDescending(it => it.Count)
        .ToArray();
    var maxMethodsClass = nrMethodsPerClass.FirstOrDefault();

    var maintAssIndex = assemblyDataFromMSFT
        .AssemblyMetric(eMSFTMetrics.MaintainabilityIndex)
        .OrderBy(it=>it.Count)
        .ToArray();
    var minMaintAssIndex = maintAssIndex.FirstOrDefault();
    var maintAssDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Maintainability for Assembly", maintAssIndex, 10, 20,false));


    var maintClassIndex = assemblyDataFromMSFT
        .ClassesMetrics(eMSFTMetrics.MaintainabilityIndex)
        .OrderBy(it => it.Count)
        .ToArray();
    var minMaintClassIndex = maintClassIndex.FirstOrDefault();
    var maintClassDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Maintainability for Class", maintClassIndex, 10, 20, false));

    var maintMethodIndex = assemblyDataFromMSFT
    .MethodsMetrics(eMSFTMetrics.MaintainabilityIndex)
    .OrderBy(it => it.Count)
    .ToArray();
    var minMaintMethodIndex = maintMethodIndex.FirstOrDefault();
    var maintMethodDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Maintainability for Method", maintMethodIndex, 10, 20, false));

    var CCAssIndex = assemblyDataFromMSFT
        .AssemblyMetric(eMSFTMetrics.ClassCoupling)
        .OrderByDescending(it => it.Count)
        .ToArray();
    var maxCCAssIndex = CCAssIndex.FirstOrDefault();
    var CCAssDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Class Coupling for Assembly", CCAssIndex, 0, 10, true));

    var CCClassIndex = assemblyDataFromMSFT
    .ClassesMetrics(eMSFTMetrics.ClassCoupling)
    .OrderByDescending(it => it.Count)
    .ToArray();
    var maxCCClassIndex = CCClassIndex.FirstOrDefault();
    var CCClassDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Class Coupling for Class", CCClassIndex, 0, 10, true));




    var CycAssIndex = assemblyDataFromMSFT
    .AssemblyMetric(eMSFTMetrics.CyclomaticComplexity)
    .OrderByDescending(it => it.Count)
    .ToArray();
    var maxCycAssIndex = CCAssIndex.FirstOrDefault();
    var CycAssDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Cyclomatic Complexity for Assembly", CycAssIndex, 10, 25, true));

    var CycClassIndex = assemblyDataFromMSFT
        .ClassesMetrics(eMSFTMetrics.CyclomaticComplexity)
        .OrderByDescending(it => it.Count)
        .ToArray();
    var maxCycClassIndex = CycClassIndex.FirstOrDefault();
    var CycClassDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Cyclomatic Complexity for Class", CycClassIndex, 10, 25, true));


    var CycMethodIndex = assemblyDataFromMSFT
    .MethodsMetrics(eMSFTMetrics.CyclomaticComplexity)
    .OrderByDescending(it => it.Count)
    .ToArray();
    var maxCycMethodIndex = CycMethodIndex.FirstOrDefault();
    var CycMethodDisplay = new NamePerCountDisplayThreshold(Tuple.Create("Cyclomatic Complexity for Method", CycMethodIndex, 10, 25, true));

    var packages=projectDicts.Packages();
    var topPackages = packages.OrderByDescending(it => it.Count).Take(7).ToArray();
    int tableRow = 0;

}

<html lang="en">
<head>
    <meta charset="utf-8">
    <script type="text/javascript" src="echarts.min.js"></script>
    <script type="text/javascript" src="vis-network.min.js"></script>
    <style>
        table thead tr {
            background-color: #ffcccb; /* Light red */
            color: black;
        }
        table tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        table tbody tr:nth-child(odd) {
            background-color: #d1e7dd;
        }

        .containerDisplayInfo {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .left, .center, .right {
            width: 30%;
            text-align: center;
        }
    </style>
</head>
<body>

    <div class="containerDisplayInfo">
        <div class="left">
    <h2>General Info</h2>
            <table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>
                        </tr>
                        </thead>
<tbody>
    <tr>
        <td>@(++tableRow)</td>
        <td>
                        Number projects : @info.nrProjects
    (tests : @info.nrTestProjects,
    total : @info.nrProjects
    )
                        </td>
    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>

                            Building Blocks: @bb0.Length
    </td>
    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>

                            Number packages : @info.nrPackages
    (Outdated : @info.nrOutdated
    ,Deprecated : @info.nrDeprecated,
    ,Major version differs :@info.nrMajorDiffers
    )
    </td>
    </tr>
    </table>
    </div>
    <div class="center">
            <h1>Summary @nameSolution   </h1>
        </div>
    <div class="right">
            <h2>Commits</h2>
            @{
                tableRow = 0;
            }
            <table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>
                        

                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>Total Commits : @info.totalCommits</td>
                    </tr>

                    <tr>
                        <td>@(++tableRow)</td>
                        <td>last commit : @maxCommitString </td>
                    </tr>

                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            The commit with max files ( @maxCommitFiles.CountFiles()  ) is sha @(maxCommitFiles.sha) on @maxCommitFiles.date.ToString("yyyy MMMM dd") )
                        </td>
                    </tr>
                    <tr>
                        <td>@(++tableRow)</td>
                        <td>
                            The file with most commits ( @filewithMaxCommits?.Value ) is @GlobalsForGenerating.RelativePath(filewithMaxCommits?.Key)
                        </td>
                    </tr>

                </tbody>
                </table>
        </div>
    </div>
    <div class="containerDisplayInfo">
    <div class="left">
    <h2 id="assembly-info">Assembly Info</h2>
    @{
                tableRow = 0;
    }
    <table>
        <thead>
            <tr>
                <th>Nr</th>
                <th>What</th>
                <th>Assembly Name</th>
                
            </tr>
        </thead>
        <tbody>
            @if (maxAssemblyRef != null)
            {
<tr>
<td>@(++tableRow)</td>
<td>Max nr of references to other assemblies:@maxAssemblyRef.Count</td>
<td>@maxAssemblyRef.Name</td>
</tr>
            }
            @if (mostPublicClasses != null)
            {
                <tr>
                    <td>@(++tableRow)</td>
                    <td>Max nr of public Classes:@mostPublicClasses.Count</td>
                    <td>@mostPublicClasses.Name</td>
                </tr>
            }
            <tr>
                <td>@(++tableRow)</td>
                <td>With max nr of Classes:@maxClasses.Count</td>
                <td>@maxClasses.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With max nr of methods:@maxMethodsAss.Count</td>
                <td>@maxMethodsAss.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With low maintaining score:@minMaintAssIndex.Count</td>
                <td>@minMaintAssIndex.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With max coupling:@maxCCAssIndex.Count</td>
                <td>@maxCCAssIndex.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With most Cyclomatic Complexity:@maxCycAssIndex.Count</td>
                <td>@maxCycAssIndex.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With most lines:@maxexecAssLines.Count</td>
                <td>@maxexecAssLines.Name</td>
            </tr>
        </tbody>
    </table>
    </div>
    <div class="center">
    <h2 id="class-info">Class Info</h2>
@{
    tableRow = 0;
 }<table>
        <thead>
            <tr>
                <th>Nr</th>
                <th>What</th>
                <th>Class name</th>

            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@(++tableRow)</td>
                <td>With max nr of methods:@maxMethodsClass.Count</td>
                <td>@maxMethodsClass.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With low maintaining score:@minMaintClassIndex.Count</td>
                <td>@minMaintClassIndex.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With max coupling:@maxCCClassIndex.Count</td>
                <td>@maxCCClassIndex.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With most Cyclomatic Complexity:@maxCycClassIndex.Count</td>
                <td>@maxCycClassIndex.Name</td>
            </tr>
            <tr>
                <td>@(++tableRow)</td>
                <td>With most lines:@maxExecClassLines.Count</td>
                <td>@maxExecClassLines.Name</td>
            </tr>

        </tbody>
        </table>
    </div>
    <div class="right">
    @{
        tableRow = 0;
    }
        <h2 id="method-info">Method Info</h2>
<table>
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>What</th>
                        <th>Method name</th>

                    </tr>
                </thead>
                <tr>
                    <td>@(++tableRow)</td>
                    <td>With low maintaining score:@minMaintMethodIndex.Count</td>
                    <td>@minMaintMethodIndex.Name</td>
                </tr>

                <tr>
                <td>@(++tableRow)</td>
                <td>With most Cyclomatic Complexity:@maxCycMethodIndex.Count</td>
                <td>@maxCycMethodIndex.Name</td>
            </tr>
                <tr>
                    <td>@(++tableRow)</td>
                    <td>With most lines:@maxExecMethodsLines?.Count</td>
                    <td>@maxExecMethodsLines?.Name</td>
                </tr>

                
            </table>
    </div>
    </div>
    <br />
    <br />
    <h1 id="radar-summary">Radar @nameSolution</h1>

    @radar.Render()


@* 
    <h1>Packages relations</h1>
    <div id="solRelPackages" ></div>

    <script type="text/javascript">
        var dot='digraph { rankdir=TB ';    
        @foreach(var prj in projectDicts.Values)
        {
            <text>
                    dot+='"@prj.PathProject" [label="@prj.NameCSproj() : @prj.Packages.Count",color="red"]\r\n';
            </text>
        }
        @foreach(var pack in topPackages)
        {
            <text>
                    dot+='"@pack.Name" [label="@pack.Name : @pack.Count" ,shape="box"]\r\n';
            </text>
        }

    @foreach (var proj in projectDicts.Values)
    {
        foreach (var rel in proj.Packages)
        {
            if(!topPackages.Any(it=>it.Name==rel.packageVersionId))
            {
                continue;
            }
            <text>
            dot+='"@proj.PathProject"  -> "@rel.packageVersionId"\r\n'
            </text>

        }

        foreach (var rel in proj.ProjectsReferences)
        {
            
            <text>
            dot+='"@proj.PathProject"  -> "@rel.PathProject"\r\n'
            </text>

        }
    }
    dot+="}";
        var dom = document.getElementById('solRelPackages');
        var data = vis.parseDOTNetwork(dot);
        var network = new vis.Network(dom, data);
    </script>
 *@
    <br />

    <h2> @nrProjectsNoTests Projects without tests</h2>
    <div class="mermaid">
        flowchart LR


    @foreach (var proj in projectDicts.AlphabeticOrderedProjectsNoTests)
    {
        var nameCsproj = proj.NameCSproj();
        var relativePath = proj.RelativePath();
        var comment = $"%% start project reference {relativePath}";
        <text>

            @comment
            @if (proj.AlphabeticalProjectsReferences().Length == 0)
            {
                <text>
                    @nameCsproj
                </text>
            }

            @foreach (var rel in proj.AlphabeticalProjectsReferences())
            {
                <text>
                    @nameCsproj-->@rel.NameCSproj()

                </text>

            }
        </text>
    }
</div>

    <h2> @info.nrProjects Projects with tests</h2>
    <div class="mermaid">
        flowchart LR


        @foreach (var proj in projectDicts.AlphabeticOrderedProjects)
        {
            var nameCsproj = proj.NameCSproj();
            var relativePath = proj.RelativePath();
            var comment = $"%% start project reference {relativePath}";
            <text>

                @comment
                @if (proj.AlphabeticalProjectsReferences().Length == 0)
                {
                    <text>
                        @nameCsproj
                    </text>
                }

                @foreach (var rel in proj.AlphabeticalProjectsReferences())
                {
                    <text>
                        @nameCsproj-->@rel.NameCSproj()

                    </text>

                }
            </text>
        }
    </div>

    <h2>Play with solution relations</h2>
    <div id="solRel"></div>

    <script type="text/javascript">
        var dot = 'digraph {  ';
        @foreach (var prj in projectDicts.Values)
        {
            <text>
                    dot+='"@prj.PathProject" [label="@prj.NameCSproj() : @prj.ProjectsReferences.Count"]\r\n';
            </text>
        }
        @foreach (var proj in projectDicts.Values)
        {

            foreach (var rel in proj.ProjectsReferences)
            {

                <text>
                            dot+='"@proj.PathProject"  -> "@rel.PathProject"\r\n'
                </text>

            }
        }
            dot+="}";
        var dom = document.getElementById('solRel');
        var data = vis.parseDOTNetwork(dot);
        var network = new vis.Network(dom, data);
    </script>


<h2>Building Blocks : @bb0.Length </h2>
    @foreach (var bbProj in bb0)
    {
        var nameCsproj = bbProj.NameCSproj();
        var relativePath = bbProj.RelativePath();
        <text>
            <h3>Project: @nameCsproj</h3>
            Full Name : @relativePath

            <div class="mermaid">
                flowchart LR
            @nameCsproj
            @foreach (var rel in bbProj.AlphabeticalUpStreamProjectReferences)
            {
                <text>
                    @rel.FullNameMermaid()
                    @rel.NameCSproj()-->@nameCsproj
                </text>
            }

            </div>

        </text>
    }
    <h2>Maintainability </h2>
    <h3>Maintainability per assembly</h3>
    @maintAssDisplay.Render()

    <h3>Maintainability per class</h3>
    @maintClassDisplay.Render()

    <h3>Maintainability per method</h3>
    @maintMethodDisplay.Render()

    <h2>Coupling</h2>
    <h3>Coupling per assembly</h3>
    @CCAssDisplay.Render()
    <h3>Coupling per Class</h3>
    @CCClassDisplay.Render()

    <h2>Cyclomatic Complexity</h2>
    <h3>Cyclomatic Complexity per assembly</h3>
    @CycAssDisplay.Render()

    <h3>Cyclomatic Complexity per class</h3>
    @CycClassDisplay.Render()

    <h3>Cyclomatic Complexity per method</h3>
    @CycMethodDisplay.Render()

    <h2> Number of classes per assembly</h2>

    @{
        tuple = new(nrClassesPerAssembly, "Number class per project");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()

    <h2> Number of methods per assembly</h2>

    @{
        tuple = new(nrMethodsPerAssembly, "Number methods per project");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()

    <h2>@keysPackageMultiple.Length Packages with major version different</h2>
    @if(keysPackageMultiple.Length>0){
    <table border="1">
        <thead>
            <tr>
                <th>Nr</th>
                <th>ID</th>
                <th>References</th>
                <th>Projects</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var key in keysPackageMultiple)
            {
                nrVersionIterator++;
                var pack = more1Version.IDPackageWithProjects[key]!;
                var vals = pack.VersionsPerProject;
                var majorDiff = pack.MajorVersionDiffer();
                string textReferences = vals.Count > 1 ? $" (References: {vals.Count}) " : "";
                string diffMajor = majorDiff ? $"<span style='color:red'> <b>Major differs</b> </span>" : "";
                string refs = "";
                @foreach (var vers in vals)
                {

                    refs += " <b>" + vers.Key + "</b> " + string.Join(",", vers.Value.Select(it => it.NameCSproj()).ToArray());
                    @* @(vers.Key) @("&nbsp;") @(string.Join(",",vers.Value.Select(it=>it.NameCSproj()))) *@
                    refs += "<br/>";
                }


                <tr>
                    <td>@nrVersionIterator</td>
                    <td>@key</td>
                    <td>@textReferences @diffMajor</td>
                    <td>@refs</td>
                </tr>
            }
        </tbody>
    </table>
    }
    <h2>Executable lines</h2>
    <h3>Per assembly</h3>
    @{
        tuple = new(execAssLines, "Number lines per project");
        namePerCountDisplay = new(tuple);
    }
    @namePerCountDisplay.Render()

    <h3>Per class</h3>

    @{

        tuple = new(execClassLines, "Number lines per class");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()

    <h2>Summary of project public classes</h2>
    @if (mostPublicClasses != null)
    {
<text>


<h3> Assemblies with number of public classes</h3>

@{
    tuple = new(publicClassRefData.Assemblies_PublicClasses, "Public class per project");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h3> Assemblies with Public methods</h3>

@{
    tuple = new(publicClassRefData.Assemblies_PublicMethods, "Public methods per class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()


<h3> Classes with Public methods</h3>


@{
    tuple = new(publicClassRefData.Class_PublicMethods, "Public methods per class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h2> Lines summary</h2>

<h3>Assemblies with most lines in public classses</h3>
@{
    tuple = new(publicClassRefData.Assemblies_MostLinesInPublicClass, "Number lines in public class per assembly");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h3>Public Classes with most lines</h3>
@{
    tuple = new(publicClassRefData.PublicClass_MostLinesOfCode, "Number lines per public class");
    namePerCountDisplay = new(tuple);
}

@namePerCountDisplay.Render()

<h3>Public Methods with most lines</h3>

@{
    tuple = new(publicClassRefData.PublicMethod_MostLinesOfCode, "Number lines per public method");
    namePerCountDisplay = new(tuple);
}


@namePerCountDisplay.Render()


</text>

    }
    <h2> References between projects</h2>

    <h3> Assemblies with Referencesx</h3>
    @{
        tuple = new(refSummary.AssembliesReferences, "References per assembly");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()
    <h3> Classes with References</h3>

    @{
        tuple = new(refSummary.classRefs, "References per class");
        namePerCountDisplay = new(tuple);
    }

    @namePerCountDisplay.Render()

    <h2 id="commits"> Commits</h2>
    <h3> Commits per year</h3>
    @if(yearCommitsFolder.Count>0){

        var xaxis = "[" +
        string.Join(',', yearCommitsFolder
        .Select(it => it.Key)
        .OrderBy(x => x)
        .ToArray()) + "]";
        var maxCommit = yearCommitsFolder.Max(x => x.Value);
        var commitsFolder = "[" + string.Join(',', yearCommitsFolder
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
        var CommitsFile = "[" + string.Join(',', yearCommitsFile
        .Select(it => it)
        .OrderBy(x => x.Key)
        .Select(x => x.Value)
        .ToArray()) + "]";
<text>
<div class="mermaid">
    xychart-beta
    title "Commits per year (folder and csproj)"
    x-axis @xaxis
    y-axis "" 0--> @maxCommit
    bar @commitsFolder
    bar @CommitsFile
</div>

</text>

<h3> Commits per year and folder </h3>

@yearFolders.Render() 


    }


@{
    var maxCommitFilesPerYear = projectDicts.CommitsWithMaxFilesPerYear();
}
    <h3> Commits with most files per year</h3>
    <table border="1">
        <thead>
            <tr>
                <th>Nr</th>
                <th>SHA</th>
                <th>Date</th>
                <th>NrFiles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in maxCommitFilesPerYear)
            {
                nrVersionIterator++;
                var key = kvp.Value;

                <tr>
                    <td>@nrVersionIterator</td>
                    <td>@key.sha</td>
                    <td>@key.date.ToString("yyyy MMM dd")</td>
                    <td>@key.CountFiles()</td>
                </tr>
            }
        </tbody>
    </table>

    <script src="mermaid.min.js"></script>
    <script>mermaid.initialize({startOnLoad:true});</script>

    <small>Generated  by https://www.nuget.org/packages/NetPackageAnalyzerConsole </small>
</body>
</html>