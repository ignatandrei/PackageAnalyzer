@inherits RazorBlade.PlainTextTemplate<Tuple<string,NamePerCount[],int,int, bool>>;
@{
    string name= Model.Item1;
    var nameCount = Model.Item2;
    if(nameCount.Count() == 0)
    {
        return;
    }
    
    var threshold1 = Model.Item3;
    var threshold2 = Model.Item4;
    var inverseData = Model.Item5;
    if(inverseData & (threshold1<threshold2))
    {
        var temp = threshold1;
        threshold1 = threshold2;
        threshold2 = temp;
    }
    var display2 = nameCount.Where(it => CompareT(it.Count, threshold1, inverseData)).ToArray();

    //threshold1 = 40;
    //threshold2 = 80;
    string assNamesMaintIndex = string.Join(",", nameCount.Select(it => "'" + it.Name + "'"));
    string valuesMaintIndex = string.Join(",\r\n",
            nameCount.Select(it =>"{value:"+ it.Count +
            (CompareT(it.Count, threshold1, inverseData) ? ",itemStyle:{color:'red'}"
                :
            (CompareT(it.Count, threshold2, inverseData) ? ",itemStyle:{color:'orange'}" : "")
            )
            + "}"
            )
            );
<text>
        <div id="@name" style="height: 100%"></div>
        <script type="text/javascript">
            var dom = document.getElementById('@name');
            var myChart = echarts.init(dom, null, {
                renderer: 'canvas',
                useDirtyRect: false
            });
            var app = {};

            var option;

            option = {
                xAxis: {
                    type: 'category',
                    data: [@assNamesMaintIndex]
                },
                yAxis: {
                    type: 'value'
                },
                tooltip: {
                    trigger: 'item',

                },
                series: [
                    {
                        data: [
            @valuesMaintIndex
                        ],
                        type: 'bar'
                    }
                ]
            };

            if (option && typeof option === 'object') {
                myChart.setOption(option);
            }

            window.addEventListener('resize', myChart.resize);
        </script>

        @{
           if (display2.Length > 0)
            {
                assNamesMaintIndex = string.Join(",", display2.Select(it => "'" + it.Name + "'"));
                
                var displayValues = nameCount
                    .Select(it => "{value:" + it.Count + ",itemStyle:{color:'red'}}"
                            )
                    .ToArray();
                
                valuesMaintIndex = string.Join(",\r\n", displayValues);

                <h2>@name bad data : @display2.Length</h2>

                <div id='@(name+"_bad")' style="height: 100%"></div>
                <script type="text/javascript">
                    var dom = document.getElementById('@(name + "_bad")');
                    var myChart = echarts.init(dom, null, {
                        renderer: 'canvas',
                        useDirtyRect: false
                    });
                    var app = {};

                    var option;

                    option = {
                        xAxis: {
                            type: 'category',
                            data: [@assNamesMaintIndex]
                        },
                        yAxis: {
                            type: 'value'
                        },
                        tooltip: {
                            trigger: 'item',

                        },
                        series: [
                            {
                                data: [
                    @valuesMaintIndex
                                            ],
                                type: 'bar'
                            }
                        ]
                    };

                    if (option && typeof option === 'object') {
                        myChart.setOption(option);
                    }

                    window.addEventListener('resize', myChart.resize);
                </script>
            }
        }


    </text>
    @functions{
        public bool CompareT(long nr  , long threshold, bool inverse)
        {
            if(inverse)
            {
                return nr > threshold;
            }
            return nr < threshold;
        }
    }
}