@inherits RazorBlade.PlainTextTemplate<Tuple<NamePerCountArray,string>>;
@{
    var arr = Model.Item1;
    if(arr == null)
    {
        return;
    };
    var nameCountOriginal = arr.DataOrdered()??[];
    if (nameCountOriginal.Length == 0)
    {
        return;
    }
    nameCountOriginal = nameCountOriginal.Distinct().ToArray();
    var nameCount = nameCountOriginal;
    if(nameCount.Length > 20)
    {
        nameCount = nameCount.Take(15).ToArray();
    }
    string name = Model.Item2;
    string nameId= name.Replace(" ", "-");
    int maxPage = nameCount.Length < 10 ? 10 : nameCount.Length;
    int nrSplit = maxPage > 100 ? 100 : 10;
    var chunk = Enumerable.Chunk(Enumerable.Range(1, maxPage), nrSplit);
    var pages = string.Join(",", chunk.Select(it => it.Last()));

    int height = 100+nameCount.Count() * 20;
    var xaxis = "[" +
        string.Join(',', nameCount
            .Select(it => it.Name)
            .Select(it => it.Replace("<", "#60;"))
            .Select(it => it.Replace(">", "#62;"))
            .Select(it => "\"" + it + "\"")
            .ToArray())
        + "]";
    var maxCount = nameCount.Max(it => it.Count);
    var yAxis = "[" + string.Join(',', nameCount.Select(it => it.Count).ToArray()) + "]";

    var nameCountGraphic = nameCount;
    if (nameCount.Length > 10)
    {
        nameCountGraphic = nameCount.Take(10).ToArray();
    }
    string assNamesMaintIndex = string.Join(",", nameCountGraphic.Select(it => "'" + it.Name + "'"));
    string valuesMaintIndex = string.Join(",\r\n",
            nameCountGraphic.Select(it => "{value:" + it.Count +"}")
            );

    StatisticsDisplay statisticsDisplay = new(arr.Statistics());

}
@statisticsDisplay.Render()


<div id="@nameId" style="height: 100%" title="image @name"></div>
<script type="text/javascript">
    var dom = document.getElementById('@nameId');
        var myChart = echarts.init(dom, null, {
            renderer: 'canvas',
        useDirtyRect: false
        });
    var app = {};

        var option;

    option = {
        xAxis: {
            type: 'category',
            data: [@assNamesMaintIndex]
        },
        yAxis: {
            type: 'value'
        },
        tooltip: {
            trigger: 'item',

        },
        series: [
                {
                    data: [
    @valuesMaintIndex
                    ],
                    type: 'bar'
                }
            ]
        };

        if (option && typeof option === 'object') {
            myChart.setOption(option);
        }

        window.addEventListener('resize', myChart.resize);
</script>


@* 
<div class="mermaid" title="image @name">
---
config:
    xyChart:
        width: 900
        height: @height
    themeVariables:
        xyChart:
            titleColor: "#ff0000"
---

xychart-beta horizontal
title "@name"
x-axis @xaxis
y-axis "" 0--> @maxCount
bar @yAxis

</div>
 *@
 <br />
<div id="@(nameId+"-table")" title="image @(nameId+"-table")"></div>

<script>
    var tabledata = [
    @foreach (var item in nameCountOriginal)
    {
        <text>
                {"Name": "@item.Name", "Nr": "@item.Count" },
        </text>
    }
                                ];
    var table = new Tabulator("@("#" + nameId + "-table")", {
        data: tabledata,
        layout: "fitColumns",
        pagination: "local",
        paginationSize: 10,
        paginationSizeSelector: [@pages],
        movableColumns: true,
        paginationCounter: "rows",
        columns: [
            { formatter: "rownum", hozAlign: "center", width: 40 },
            { title: "Name", field: "Name", headerFilter: "input" },
            { title: "@name", field: "Nr", headerFilter: "input" },
        ],
    });

</script>
