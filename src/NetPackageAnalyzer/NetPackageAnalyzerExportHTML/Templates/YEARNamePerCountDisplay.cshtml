@inherits RazorBlade.PlainTextTemplate<Dictionary<int,NamePerCount[]>>;
@{
    var names = Model
    .Values
    .SelectMany(it => it)
    .Select(it=>it.Name)
    .Distinct()
    .OrderBy(it => it)
    .ToArray();

    var legendData = 
    string.Join(",",names.Select(it =>$"'{it}'")
    .ToArray());
    var years = Model.Keys
        .OrderBy(it => it)
        .ToArray(); 
    var yAxisData = 
    string.Join(",", years.Select(it => $"'{it}'")
                .ToArray()
               );
    var allValues= Model.Values.SelectMany(it => it).ToArray();

}
<text>
    <div id="container" style="height: 100%"></div>
        <script type="text/javascript" src="https://fastly.jsdelivr.net/npm/echarts@5.5.1/dist/echarts.min.js"></script>


        <script type="text/javascript">
            var dom = document.getElementById('container');
            var myChart = echarts.init(dom, null, {
                renderer: 'canvas',
                useDirtyRect: false
            });
            var app = {};
            var ROOT_PATH = 'https://echarts.apache.org/examples';
            var option;

            const seriesLabel = {
                show: true
            };
            option = {
                title: { 
                    text: ''
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    }
                },
                legend: {
                    data: [@legendData]
                },
                grid: {
                    left: 100
                },
                toolbox: {
                    show: true,
                    feature: {
                        saveAsImage: {}
                    }
                },
                xAxis: {
                    type: 'value',
                    name: 'Commits',
                    axisLabel: {
                        formatter: '{value}'
                    }
                },
                yAxis: {
                    type: 'category',
                    inverse: true,
                    data: [@yAxisData],
                    axisLabel: {
                        formatter: function (value) {
                            return '{' + value + '| }\n{value|' + value + '}';
                        },
                        margin: 20,
                        rich: {
                            value: {
                                lineHeight: 30,
                                align: 'center'
                            },
                        }
                    }
                },
                series: [
@foreach (var folder in names)
        {
            List<string> dataFolder = [];
            foreach (var year in years) {
                var data = Model[year]
                    .FirstOrDefault(x => x.Name == folder)?
                    .Count.ToString() ?? "null";
                dataFolder.Add(data);
            }
            
        <text>
{
name: '@folder',
type: 'bar',
data: [@string.Join(",",dataFolder)],
label: seriesLabel,
},
        
                </text>
}
                    
                ]
            };

            if (option && typeof option === 'object') {
                myChart.setOption(option);
            }

            window.addEventListener('resize', myChart.resize);
        </script>

</text>