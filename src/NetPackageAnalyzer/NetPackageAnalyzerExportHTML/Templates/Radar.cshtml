@inherits RazorBlade.PlainTextTemplate<Tuple<ProjectsDict,PublicClassRefData, AssemblyDataFromMSFT,string>>;
@{
    var publicClassRefData = Model.Item2;
    var projectDicts = Model.Item1;
    var assemblyDataFromMSFT = Model.Item3;
    var projS = projectDicts.AlphabeticOrderedProjects 
        .OrderBy(it=>it.NameCSproj())
        //.Take(2)
        .ToArray();
    var projectNames = projS.Select(x => x.NameCSproj()).ToArray();
    string legend = string.Join(",", projectNames.Select(x => $"'{x}'"));
    var cm = projectDicts.CommitsPerFolder();
    var maxCommit = cm.Max(x => x.Count);
    var maxPackages =projectDicts.MaxPackages;
    var maxProjReferences = projectDicts.MaxReferences;
    var assData = publicClassRefData.Assemblies_PublicClasses??[];
    var maxPublicClasses=assData.Length==0?0: assData.Max(x=>x.Count);

    var assLinesPublic = publicClassRefData.Assemblies_MostLinesInPublicClass??[];
    var maxLinesPublic = assLinesPublic.Length == 0 ? 0 : assLinesPublic.Max(x => x.Count);

    var yearCommitsFolder = projectDicts.CommitsPerYearFolder();
    int maxCommitYear = yearCommitsFolder.Count == 0 ? DateTime.Now.Year : yearCommitsFolder.Max(x => x.Key);
    var arrCommits = yearCommitsFolder
        .Where(it => it.Key == maxCommitYear)
        .ToArray();
    var maxCommitYearCommits =
    projS.Max(it => it.AllHistoryFolderYear(maxCommitYear).nrCommits)??0;

    var sourceAssLines = assemblyDataFromMSFT.AssemblyMetric(eMSFTMetrics.SourceLines);
    var maxexecAssLines = sourceAssLines.Length == 0 ? 0 : sourceAssLines.Max(x => x.Count);

    var cycloAss = assemblyDataFromMSFT.AssemblyMetric(eMSFTMetrics.CyclomaticComplexity);
    var maxCycloAss = cycloAss.Length == 0 ? 0 : cycloAss.Max(x => x.Count);

    
    var nrClassesAss = assemblyDataFromMSFT.AssemblyNumberClasses();
    var maxNrClasses = nrClassesAss.Length == 0 ? 0 : nrClassesAss.Max(x => x.Count);

    var nrMethods = assemblyDataFromMSFT.AssemblyNumberMethods();
    var maxNrMethods = nrMethods.Length == 0 ? 0 : nrMethods.Max(x => x.Count);

    var ccAss = assemblyDataFromMSFT.AssemblyMetric(eMSFTMetrics.ClassCoupling);
    var maxccAss = ccAss.Length == 0 ? 0 : ccAss.Max(x => x.Count);


//todo: add class coupling

}
<div id="containerRadar" style="height: 100%"></div>

<script type="text/javascript">
    var dom = document.getElementById('containerRadar');
    var myChart = echarts.init(dom, null, {
        renderer: 'canvas',
        useDirtyRect: false
    });
    var app = {};

    var option;

    option = {
        title: {
            text: ''
        },
        legend: {
            data: [@legend]
        },            
        tooltip: {
            trigger: 'item'
        },
        radar: {
            // shape: 'circle',
            indicator: [
                { name: 'Total Commits', max: @maxCommit },
                { name: 'Commits @maxCommitYear', max: @maxCommitYearCommits },
                { name: 'Packages', max: @maxPackages },
                { name: 'References', max: @maxProjReferences },
                { name: 'Number Public Classes', max: @maxPublicClasses },
                { name: 'Lines in Public Classes', max: @maxLinesPublic },
                { name: 'Number Classes',max:@maxNrClasses},
                { name: 'Total Lines', max: @maxexecAssLines },
                { name: "Cyclomatic", max: @maxCycloAss},
                { name: "CodeCoupling", max: @maxccAss},
            ]
        },
        series: [
            {
                name: 'Info',
                type: 'radar',
                data: [
    @foreach(var prj in projS)
    {
        var nameCsproj = prj.NameCSproj();
        var commit = cm.FirstOrDefault(it => it.Name == prj.PathProject);
        var nrCommits =commit?.Count ?? 0;
        var nrPackages = prj.Packages?.Count ?? 0;
        var nrProjRefs = prj.ProjectsReferences?.Count ?? 0;
        var nrPublicClasses = assData.FirstOrDefault(it => it.Name.EndsWith(nameCsproj))?.Count ?? 0;
        
        var commitsYear = prj.AllHistoryFolderYear(maxCommitYear).nrCommits;

        var nrLinesPublic =assLinesPublic.FirstOrDefault(it => it.Name.EndsWith(nameCsproj))?.Count ?? 0;
        var nrLines = sourceAssLines.FirstOrDefault(it => it.Name == (nameCsproj))?.Count ?? 0;
        var nrClasses = nrClassesAss.FirstOrDefault(it => it.Name == (nameCsproj))?.Count ?? 0;
        var nrCyc = cycloAss.FirstOrDefault(it => it.Name == (nameCsproj))?.Count ?? 0;
        var nrCC = ccAss.FirstOrDefault(it => it.Name == (nameCsproj))?.Count ?? 0;

        <text>
    {
                                value: [@nrCommits,@commitsYear, @nrPackages, @nrProjRefs, @nrPublicClasses, @nrLinesPublic,@nrClasses, @nrLines, @nrCyc,@nrCC],
name: '@prj.NameCSproj()'
    },
</text>
    }

        
                ]
            }
        ]
    };

    if (option && typeof option === 'object') {
        myChart.setOption(option);
    }

    window.addEventListener('resize', myChart.resize);
</script>